# Reading materials
# Visualizing Performance with Flame Graphs
http://www.brendangregg.com/Slides/USENIX_ATC2017_flamegraphs.pdf
https://youtu.be/D53T1Ejig1Q

# Copy matching linuxkit kernel header
#   https://github.com/falcosecurity/falco/issues/657
# Save following lines, change the kernel version string (4.9.184) to yours, in a dockerfile (linuxkit-bionic.dockfile)
#   FROM linuxkit/kernel:4.9.184 AS ksrc
#   FROM ubuntu:bionic
#   COPY --from=ksrc /kernel-dev.tar /
#   COPY --from=ksrc /kernel.tar /
#   CMD ["/bin/bash"] 
# Docker build/run and copy tar files out to your host 
#   docker build -f linuxkit-bionic.dockfile -t linuxkit-kernel-headers:4.9.184 .
# Later we will extract these tar files onto your build machine's root folder
#   docker run --rm -it -v ~/hostlogs:/var/log/hostlogs linuxkit-kernel-headers:4.9.184 /bin/bash
# In docker
*   cp /*.tar /var/log/hostlogs

# Docker run your bpftrace build machine (ubnutu:bionic)
# Tips: Apt install build packages listed in bpftrace,
#       Jump back to bcc's steps and finish make and install 
#       Follow and finish bpftrace's instructions, make and install
# Instructions to build bcc: https://github.com/iovisor/bcc/blob/master/INSTALL.md#install-and-compile-bcc-3
# Instructions to build bpftrace: https://github.com/iovisor/bpftrace/blob/master/INSTALL.md#building-bpftrace-1

# /sys/kernel/debug/tracing/available_events: No such file or directory"
mount -t debugfs none /sys/kernel/debug/

# Kernel config (run once)
# Running against Java process, Java's -XX:MaxInlineSize and -XX:InlineSmallCode can be tuned
sysctl -w kernel.perf_event_max_stack=512

# Linux	CPU	Flame	Graphs: Linux	4.9+,	via	BPF:
git clone --depth 1 https://github.com/brendangregg/FlameGraph
git clone --depth 1 https://github.com/iovisor/bcc
./bcc/tools/profile.py -dF 99 30 | ./FlameGraph/flamegraph.pl > perf.svg

# Off-CPU flamegraph
#   http://www.brendangregg.com/offcpuanalysis.html
/usr/share/bcc/tools/offcputime -df -p `pgrep -nx mysqld` 30 > out.stacks
git clone https://github.com/brendangregg/FlameGraph
cd FlameGraph
./flamegraph.pl --color=io --title="Off-CPU Time Flame Graph" --countname=us < out.stacks > out.svg

# Other bpftrace usages
perf record -e page-faults -p PID -g -- sleep 120
# Shows	who	issued	disk	I/O	(sync	reads	&	writes):
perf record -e block:block_rq_insert -a -g -- sleep 60
# Show	why	Java	blocked	and	stopped	running	on-CPU:
perf record -e context-switches -p PID -g -- sleep 5

http://www.brendangregg.com/blog/2016-02-01/linux-wakeup-offwake-profiling.html
offcputime -fu 10 > out.offcpu
flamegraph.pl --color=io --countname=us < out.offcpu > offcpu.svg
wakeuptime -fu 10 > out.wakeup
flamegraph.pl --color=waker --countname=us < out.wakeup > wakeup.svg 

# Combined off-cpu & wakeup
offwaketime -fu 10 > out.offwake
flamegraph.pl --color=chain --countname=us < out.offwake > offwake.svg 

hcps://github.com/corpaul/flamegraphdif

CPU	Cache	Misses: sampling	via	Last	Level	Cache	loads:
perf record -e LLC-loads -c 10000 -a -g -- sleep 5; jmaps
perf script -f comm,pid,tid,cpu,time,event,ip,sym,dso > out.stacks

# TCP	transmit,	using	dynamic	tracing:	
perf probe tcp_sendmsg
perf record -e probe:tcp_sendmsg -a -g -- sleep 1; jmaps
perf script -f comm,pid,tid,cpu,time,event,ip,sym,dso,trace > out.stacks
perf probe --del tcp_sendmsg
