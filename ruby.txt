# See string allocations on string literal -- string is by default mutable
# 1. Do 'abc'.freeze
# 2. Turn immutable string on by defualt:
# export RUBYOPT=--enable-frozen-string-literal
require 'objspace'
GC.start
GC.disable
puts ObjectSpace.count_objects[:T_STRING]
1_000_000.times {'a'}
puts ObjectSpace.count_objects[:T_STRING]
GC.enable
GC.start
puts ObjectSpace.count_objects[:T_STRING]
GC.disable
1_000_000.times {'a'.freeze}
puts ObjectSpace.count_objects[:T_STRING]

# Method 2
# gem install memory_profiler
require 'memory_profiler'
MemoryProfiler.report do
  1_000_000.times {'a'}
end.pretty_print


# rbtrace + stackprof

## Gemfile
+  gem 'rbtrace'
+  gem 'rubocop-junit_formatter', '~> 0.2'
+  gem 'rubocop-performance', '~> 1.3'
+  gem 'stackprof', require: false

## config/application.rb
+require 'rbtrace'
+require 'stackprof'
+require 'objspace'
+ObjectSpace.trace_object_allocations_start

## Start profiling by thread injection
rbtrace -p <PID> -e 'Thread.new{ require "stackprof"; StackProf.start(mode: :cpu, raw: true); sleep 120; StackProf.stop; StackProf.results("/tmp/worker0"); }'
rbtrace -p <PID> -e 'Thread.new{ GC.start; require "objspace"; io = File.open("/tmp/ruby-heap.dump", "w"); ObjectSpace.dump_all(output: io); io.close; }'

# Build stackprof gem with d3-flamegraph support
#   https://github.com/tmm1/stackprof.git
#   gem build stackprof.gemspec
#   gem install stackprof-xxx.gem

# flamegraph + bottom-up
stackprof --d3-flamegraph /tmp/worker0 > flamegraph.html
stackprof /tmp/worker0 --text

# heapy + heap dump
#   heapy read /tmp/ruby-heap.dump
#   heapy read /tmp/ruby-heap.dump all
#   heapy read /tmp/ruby-heap.dump 99 (a generation number)

## Ad-hoc profile calls in controller
##   when the thread injection failed with command buffer too small
     if @@once.nil?
       @@once = true
       Thread.new {
         require 'stackprof'
         StackProf.start(mode: :cpu, raw: true)
         sleep 120
         StackProf.stop
         StackProf.results("/tmp/worker0")
       }
     end

or, this:

    if (@@count + 1) % 100 == 0
      @@count += 1
       Thread.new {
         GC.start
         require "objspace"
         io = File.open("/tmp/ruby-heap.dump", "w")
          ObjectSpace.dump_all(output: io)
          io.close
       }
     end
